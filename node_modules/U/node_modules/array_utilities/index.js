var Querify = require('querify');

exports.range = function (start, end) {
	var result = [];
	
	for (var i = start; i <= end; i++) {
		result.push(i);
	}
	
	return result;
};

exports.find = function (target, selector) {
	var predicate;

	switch (typeof selector) {
		case 'function':
			predicate = selector;		
		break;

		case 'object':	
		default:
			predicate = Querify.compile(selector);
		break;
	}

	var result = [];
	for (var i = 0; i<target.length; i++) {
		var value = target[i];
		if (predicate(value)) {
			result.push(value);
		}	
	}
	
	return result;
};

exports.findOne = function (target, selector) {
	var result = exports.find(target, selector);
	if (result.length > 0) {
		return result.shift();
	}
};

exports.contains = function (target, selector) {
	return exports.findOne(target, selector) != null;	
};

exports.remove = function (target, reference) {
	for (var i = 0; i<target.length; i++) {
		var value = target[i];
		if (reference === value) {
			target.splice(i, 1);
			return true;
		}
	}
};

exports.bindNative = function () {
	Array.prototype.find = function (selector) {
		return exports.find(this, selector);
	};

	Array.prototype.findOne = function (selector) {
		return exports.findOne(this, selector);
	};

	Array.prototype.contains = function (selector) {
		return exports.contains(this, selector);	
	};

	Array.prototype.remove = function (reference) {
		return exports.remove(this, reference);
	};
};

/*
exports.bindNative();
var item = {name: 'mads', age: 10, contact: {mobile: '31407879', number: 5}};
var collection = [
	item,
	{name: 'line', age: 20, contact: {number: 50}},
	{name: 'test', age: 30}
];*/

//console.log(collection.remove(item));
//console.log(collection.find({age: {$gt: 15}}));
//console.log(collection.find({$or: [{'contact.number': {$gte: 5}}, {name: 'test'}]}));
//console.log(collection.find({'contact.number': /^[0-9]{1}$/}));
//console.log(collection.find({'contact.number': {$not: 50}}));